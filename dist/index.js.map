{
  "version": 3,
  "sources": ["../lib/ndarray.js", "../lib/clacgv.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar reinterpret = require( '@stdlib/strided-base-reinterpret-complex64' );\n\n\n// MAIN //\n\n/**\n* Conjugates each element in a single-precision complex floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64Array} cx - input array\n* @param {integer} strideCX - `cx` stride length\n* @param {NonNegativeInteger} offsetCX - starting `cx` index\n* @returns {Complex64Array} input array\n*\n* @example\n* var Complex64Array = require( '@stdlib/array-complex64' );\n* var realf = require( '@stdlib/complex-float32-real' );\n* var imagf = require( '@stdlib/complex-float32-imag' );\n*\n* var cx = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n*\n* clacgv( 3, cx, 1, 0 );\n*\n* var z = cx.get( 0 );\n* // returns <Complex64>\n*\n* var re = realf( z );\n* // returns 1.0\n*\n* var im = imagf( z );\n* // returns -2.0\n*/\nfunction clacgv( N, cx, strideCX, offsetCX ) {\n\tvar cx32;\n\tvar ix;\n\tvar sx;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn cx;\n\t}\n\t// Reinterpret the input array as a real-valued array of interleaved real and imaginary components:\n\tcx32 = reinterpret( cx, 0 );\n\n\t// Adjust the strides and offset:\n\tsx = strideCX * 2;\n\tix = ( offsetCX * 2 ) + 1; // index of the first imaginary component\n\n\t// Conjugate each element by negating the imaginary components...\n\tfor ( i = 0; i < N; i++ ) {\n\t\tcx32[ ix ] = -cx32[ ix ];\n\t\tix += sx;\n\t}\n\treturn cx;\n}\n\n\n// EXPORTS //\n\nmodule.exports = clacgv;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar stride2offset = require( '@stdlib/strided-base-stride2offset' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\n/**\n* Conjugates each element in a single-precision complex floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64Array} cx - input array\n* @param {integer} strideCX - `cx` stride length\n* @returns {Complex64Array} input array\n*\n* @example\n* var Complex64Array = require( '@stdlib/array-complex64' );\n* var realf = require( '@stdlib/complex-float32-real' );\n* var imagf = require( '@stdlib/complex-float32-imag' );\n*\n* var cx = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n*\n* clacgv( 3, cx, 1 );\n*\n* var z = cx.get( 0 );\n* // returns <Complex64>\n*\n* var re = realf( z );\n* // returns 1.0\n*\n* var im = imagf( z );\n* // returns -2.0\n*/\nfunction clacgv( N, cx, strideCX ) {\n\treturn ndarray( N, cx, strideCX, stride2offset( N, strideCX ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = clacgv;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar clacgv = require( './clacgv.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( clacgv, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = clacgv;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* LAPACK BLAS-like level-1 routine to conjugate each element in a single-precision complex floating-point vector.\n*\n* @module @stdlib/lapack-base-clacgv\n*\n* @example\n* var Complex64Array = require( '@stdlib/array-complex64' );\n* var realf = require( '@stdlib/complex-float32-real' );\n* var imagf = require( '@stdlib/complex-float32-imag' );\n* var clacgv = require( '@stdlib/lapack-base-clacgv' );\n*\n* var cx = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n*\n* clacgv( 3, cx, 1 );\n*\n* var z = cx.get( 0 );\n* // returns <Complex64>\n*\n* var re = realf( z );\n* // returns 1.0\n*\n* var im = imagf( z );\n* // returns -2.0\n*\n* @example\n* var Complex64Array = require( '@stdlib/array-complex64' );\n* var realf = require( '@stdlib/complex-float32-real' );\n* var imagf = require( '@stdlib/complex-float32-imag' );\n* var clacgv = require( '@stdlib/lapack-base-clacgv' );\n*\n* var cx = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n*\n* clacgv.ndarray( 3, 1, 0 );\n*\n* var z = cx.get( 0 );\n* // returns <Complex64>\n*\n* var re = realf( z );\n* // returns 1.0\n*\n* var im = imagf( z );\n* // returns -2.0\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nvar tryRequire = require( '@stdlib/utils-try-require' );\nvar isError = require( '@stdlib/assert-is-error' );\nvar main = require( './main.js' );\n\n\n// MAIN //\n\nvar clacgv;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tclacgv = main;\n} else {\n\tclacgv = tmp;\n}\n\n\n// EXPORTS //\n\nmodule.exports = clacgv;\n\n// exports: { \"ndarray\": \"clacgv.ndarray\" }\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAc,QAAS,4CAA6C,EAgCxE,SAASC,EAAQC,EAAGC,EAAIC,EAAUC,EAAW,CAC5C,IAAIC,EACAC,EACAC,EACAC,EAEJ,GAAKP,GAAK,EACT,OAAOC,EAUR,IAPAG,EAAON,EAAaG,EAAI,CAAE,EAG1BK,EAAKJ,EAAW,EAChBG,EAAOF,EAAW,EAAM,EAGlBI,EAAI,EAAGA,EAAIP,EAAGO,IACnBH,EAAMC,CAAG,EAAI,CAACD,EAAMC,CAAG,EACvBA,GAAMC,EAEP,OAAOL,CACR,CAKAJ,EAAO,QAAUE,ICjFjB,IAAAS,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAgB,QAAS,oCAAqC,EAC9DC,EAAU,IA+Bd,SAASC,EAAQC,EAAGC,EAAIC,EAAW,CAClC,OAAOJ,EAASE,EAAGC,EAAIC,EAAUL,EAAeG,EAAGE,CAAS,CAAE,CAC/D,CAKAN,EAAO,QAAUG,IC7DjB,IAAAI,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAc,QAAS,uDAAwD,EAC/EC,EAAS,IACTC,EAAU,IAKdF,EAAaC,EAAQ,UAAWC,CAAQ,EAKxCH,EAAO,QAAUE,ICgCjB,IAAIE,EAAO,QAAS,MAAO,EAAE,KACzBC,EAAa,QAAS,2BAA4B,EAClDC,EAAU,QAAS,yBAA0B,EAC7CC,EAAO,IAKPC,EACAC,EAAMJ,EAAYD,EAAM,UAAW,aAAc,CAAE,EAClDE,EAASG,CAAI,EACjBD,EAASD,EAETC,EAASC,EAMV,OAAO,QAAUD",
  "names": ["require_ndarray", "__commonJSMin", "exports", "module", "reinterpret", "clacgv", "N", "cx", "strideCX", "offsetCX", "cx32", "ix", "sx", "i", "require_clacgv", "__commonJSMin", "exports", "module", "stride2offset", "ndarray", "clacgv", "N", "cx", "strideCX", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "clacgv", "ndarray", "join", "tryRequire", "isError", "main", "clacgv", "tmp"]
}
